name: Deploy Wisecow to Kind

on:
  push:
    branches: [main]

jobs:
  deploy-to-kind:
    runs-on: ubuntu-latest
    steps:
    # 📁 Checkout source code
    - name: Checkout code
      uses: actions/checkout@v3

    # 📋 List files for debugging
    - name: List files
      run: ls -R

    # 🧱 Set up Kind CLI and cluster
    - name: Set up Kind
      uses: helm/kind-action@v1.5.0

    - name: Create Kind cluster with custom config
      run: kind create cluster --name kind --config kind-config.yml

    - name: Label Kind node for ingress
      run: kubectl label node kind-control-plane ingress-ready=true

    - name: Remove taint from Kind node
      run: kubectl taint nodes kind-control-plane node-role.kubernetes.io/control-plane- || true

    # 🐳 Build and load Docker image into Kind
    - name: Build Docker image
      run: docker build -t wisecow:local .

    - name: Load image into Kind
      run: kind load docker-image wisecow:local

    # 🌐 Install NGINX Ingress Controller
    - name: Install NGINX Ingress
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/kind/deploy.yaml
        sleep 60

    # 🛠️ Patch ingress-nginx service to NodePort (safe merge)
    - name: Patch ingress-nginx service to NodePort
      run: |
        kubectl patch svc ingress-nginx-controller -n ingress-nginx \
          --type='merge' -p '{"spec": {"type": "NodePort"}}'

    # ⏳ Wait for ingress controller rollout
    - name: Wait for ingress controller rollout
      run: kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=300s

    # 🔐 Generate TLS certs and create secret
    - name: Generate TLS certs
      run: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout tls.key -out tls.crt \
          -subj "/CN=wisecow.local"
        kubectl create secret tls wisecow-tls \
          --cert=tls.crt --key=tls.key

    # 🚀 Apply Kubernetes manifests
    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/deployment.yml
        kubectl apply -f k8s/service.yml
        kubectl apply -f k8s/ingress.yml

    # ⏳ Wait for Wisecow pod to be ready
    - name: Wait for Wisecow pod readiness
      run: kubectl wait --for=condition=Ready pod -l app=wisecow --timeout=120s

    # 🔍 Inspect cluster resources
    - name: Inspect cluster resources
      run: |
        echo "🔐 TLS Secret:"
        kubectl get secret wisecow-tls -n default
        echo "📦 Pods:"
        kubectl get pods -n default
        echo "🔗 Services:"
        kubectl get svc -n default
        echo "🌐 Ingress:"
        kubectl describe ingress wisecow-ingress

    # 🧾 Describe Wisecow pod
    - name: Describe Wisecow pod
      run: |
        POD_NAME=$(kubectl get pods -l app=wisecow -o jsonpath="{.items[0].metadata.name}")
        kubectl describe pod $POD_NAME

    # 🧪 Check for image pull or startup errors
    - name: Check for image pull errors
      run: kubectl get events --sort-by='.lastTimestamp'

    # 🧪 Test Wisecow app via direct pod IP and port 4499
    - name: Test Wisecow app via pod IP
      run: |
        POD_IP=$(kubectl get pod -l app=wisecow -o jsonpath="{.items[0].status.podIP}")
        echo "Waiting for Wisecow app to be ready..."
        sleep 10
        echo "Testing Wisecow app on port 4499 at $POD_IP..."
        RESPONSE=$(echo -e "GET / HTTP/1.1\nHost: localhost\n\n" | nc $POD_IP 4499 || echo "Connection failed")
        echo "$RESPONSE"
        if echo "$RESPONSE" | grep "cowsay"; then
          echo "✅ Wisecow app responded correctly"
        else
          echo "❌ Unexpected response from Wisecow app"
          exit 1
        fi

    # 🧹 Clean up TLS files
    - name: Clean up TLS files
      run: rm tls.crt tls.key
