name: Deploy Wisecow to Kind

on:
  push:
    branches: [main]

jobs:
  deploy-to-kind:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # - name: List files
    #   run: ls -R

    - name: Set up Kind
      uses: helm/kind-action@v1.5.0

    - name: Create Kind cluster with custom config
      run: kind create cluster --name kind --config kind-config.yml

    - name: Label Kind node for ingress
      run: kubectl label node kind-control-plane ingress-ready=true

    - name: Remove taint from Kind node
      run: kubectl taint nodes kind-control-plane node-role.kubernetes.io/control-plane- || true

    - name: Build Docker image
      run: docker build -t wisecow:local .

    - name: Load image into Kind
      run: kind load docker-image wisecow:local

    - name: Install NGINX Ingress
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/kind/deploy.yaml
        sleep 60

    - name: Wait for ingress controller rollout
      run: kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=300s

    - name: Generate TLS certs
      run: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout tls.key -out tls.crt \
          -subj "/CN=wisecow.local"
        kubectl create secret tls wisecow-tls \
          --cert=tls.crt --key=tls.key

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/deployment.yml
        kubectl apply -f k8s/service.yml
        kubectl apply -f k8s/ingress.yml

    - name: Wait for Wisecow pod readiness
      run: kubectl wait --for=condition=Ready pod -l app=wisecow --timeout=120s

    - name: Inspect cluster resources
      run: |
        echo "üîê TLS Secret:"
        kubectl get secret wisecow-tls -n default
        echo "üì¶ Pods:"
        kubectl get pods -n default
        echo "üîó Services:"
        kubectl get svc -n default
        echo "üåê Ingress:"
        kubectl describe ingress wisecow-ingress

    # - name: Describe Wisecow pod
    #   run: |
    #     POD_NAME=$(kubectl get pods -l app=wisecow -o jsonpath="{.items[0].metadata.name}")
    #     kubectl describe pod $POD_NAME

    # - name: Check for image pull errors
    #   run: kubectl get events --sort-by='.lastTimestamp'

    # - name: Port-forward Wisecow service to localhost
    #   run: |
    #     echo "Starting port-forward to localhost:4499..."
    #     kubectl port-forward svc/wisecow-service 4499:4499 &
    #     sleep 10

    - name: Port-forward Wisecow service to localhost
      run: |
        echo "Starting port-forward to localhost:4499..."
        kubectl port-forward svc/wisecow-service 4499:4499 > port-forward.log 2>&1 &
        sleep 5
        echo "Waiting for port 4499 to become available..."
        for i in {1..10}; do nc -z localhost 4499 && echo "‚úÖ Port 4499 is open" && break || sleep 2; done

    - name: Test Wisecow app via localhost using curl
      run: |
        echo "Testing Wisecow app on http://localhost:4499..."
        RESPONSE=$(curl --max-time 10 --connect-timeout 5 http://localhost:4499 || echo "Connection failed")
        echo "$RESPONSE"
        if echo "$RESPONSE" | grep "<pre>"; then
          echo "‚úÖ Wisecow app responded correctly"
        else
          echo "‚ùå Unexpected response from Wisecow app"
          exit 1
        fi

    # - name: Print external access URL
    #   run: |
    #      echo "üåê You can now access Wisecow at: http://localhost:4499"

    # - name: Print actual host IP for access
    #   run: |
    #      HOST_IP=$(hostname -I | awk '{print $1}')
    #      echo "üåê You can now access Wisecow at: http://$HOST_IP:4499"

    - name: Expose Wisecow externally using ngrok
      run: |
        echo "Installing ngrok and starting tunnel..."
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok
        ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        ngrok http 4499 > ngrok.log &
        sleep 10

    - name: |
           Developer Tip: Keep ngrok tunnel alive beyond CI
      run: |
         echo "üí° TIP: The ngrok tunnel above will only stay active while this GitHub Actions job is running."
         echo "To keep Wisecow publicly accessible after CI completes:"
         echo "1Ô∏è‚É£ Run this workflow locally using the 'act' CLI: https://github.com/nektos/act"
         echo "2Ô∏è‚É£ Or deploy Wisecow to a cloud Kubernetes cluster (e.g., AKS, GKE, EKS) with a LoadBalancer or Ingress."
         echo "3Ô∏è‚É£ Or run 'kubectl port-forward svc/wisecow-service 4499:4499' and 'ngrok http 4499' manually on your local machine."      

    - name: Fetch public ngrok URL
      run: |
        NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        echo "üåê Wisecow is now publicly accessible at: $NGROK_URL"


    - name: Clean up TLS files
      run: rm tls.crt tls.key
